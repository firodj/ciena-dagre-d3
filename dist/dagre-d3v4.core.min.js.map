{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","dagre-d3.core.js","lib/arrows.js","lib/create-clusters.js","lib/create-edge-labels.js","lib/create-edge-paths.js","lib/create-nodes.js","lib/d3.js","lib/dagre.js","lib/graphlib.js","lib/intersect/index.js","lib/intersect/intersect-circle.js","lib/intersect/intersect-ellipse.js","lib/intersect/intersect-line.js","lib/intersect/intersect-node.js","lib/intersect/intersect-polygon.js","lib/intersect/intersect-rect.js","lib/label/add-html-label.js","lib/label/add-label.js","lib/label/add-svg-label.js","lib/label/add-text-label.js","lib/lodash.js","lib/position-clusters.js","lib/position-edge-labels.js","lib/position-nodes.js","lib/render.js","lib/shapes.js","lib/util.js","lib/version.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dagreD3","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","graphlib","dagre","intersect","render","util","version","./lib/dagre","./lib/graphlib","./lib/intersect","./lib/render","./lib/util","./lib/version","2","normal","parent","id","edge","type","marker","append","attr","path","style","applyStyle","vee","undirected","default","./util","3","createClusters","selection","clusters","nodes","filter","v","isSubgraph","svgClustersUpdate","selectAll","data","remove","svgClustersEnter","enter","node","svgClustersMerge","merge","applyTransition","each","thisGroup","d3","select","labelGroup","addLabel","clusterLabelPos","c","domCluster","exit","./label/add-label","4","createEdgeLabels","svgEdgeLabelsUpdate","edges","edgeToId","classed","svgEdgeLabelsEnter","svgEdgeLabelsMerge","label","bbox","getBBox","labelId","_","has","width","height","./d3","./lodash","5","createEdgePaths","arrows","svgPathsUpdate","svgPathsEnter","svgPathsMerge","domEdge","elem","applyClass","arrowheadId","uniqueId","makeFragmentRef","location","href","calcPoints","arrowhead","url","fragmentId","baseUrl","split","tail","head","w","points","slice","unshift","intersectNode","push","createLine","line","x","d","y","hasOwnProperty","curve","getCoords","matrix","ownerSVGElement","getScreenCTM","inverse","multiply","translate","svgPaths","sourceElem","range","map","svgPathExit","source","getTotalLength","./intersect/intersect-node","6","createNodes","shapes","simpleNodes","svgNodesUpdate","svgNodesEnter","svgNodesMerge","labelDom","shape","pick","paddingLeft","paddingRight","paddingTop","paddingBottom","shapeSvg","shapeBBox","7","8","undefined","9","10","circle","ellipse","polygon","rect","./intersect-circle","./intersect-ellipse","./intersect-node","./intersect-polygon","./intersect-rect","11","intersectCircle","rx","point","intersectEllipse","12","ry","cx","cy","px","py","det","Math","sqrt","dx","abs","dy","13","intersectLine","p1","p2","q1","q2","a1","a2","b1","b2","c1","c2","r1","r2","r3","r4","denom","offset","num","sameSign","14","15","intersectPolygon","polyPoints","x1","y1","intersections","minX","Number","POSITIVE_INFINITY","minY","forEach","entry","min","left","top","sort","p","q","pdx","pdy","distp","qdx","qdy","distq","console","log","./intersect-line","16","intersectRect","sx","sy","h","17","addHtmlLabel","root","fo","div","insert","html","labelStyle","client","getBoundingClientRect","../util","18","labelSvg","labelType","addSVGLabel","addTextLabel","labelBBox","./add-html-label","./add-svg-label","./add-text-label","19","domNode","appendChild","20","lines","processEscapeSequences","text","ch","newText","escaped","21","lodash","22","positionClusters","created","23","positionEdgeLabels","24","positionNodes","25","fn","svg","preProcessGraph","outputGroup","createOrSelectGroup","clustersGroup","edgePathsGroup","edgeLabels","layout","postProcessGraph","value","arguments","children","defaults","paddingX","paddingY","padding","NODE_DEFAULT_ATTRS","k","_prevWidth","_prevHeight","EDGE_DEFAULT_ATTRS","name","empty","./arrows","./create-clusters","./create-edge-labels","./create-edge-paths","./create-nodes","./dagre","./position-clusters","./position-edge-labels","./position-nodes","./shapes","26","max","diamond","SQRT2","join","./intersect/intersect-circle","./intersect/intersect-ellipse","./intersect/intersect-polygon","./intersect/intersect-rect","27","escapeId","str","String","replace","ID_DELIM","dom","styleFn","classFn","otherClasses","graph","isPlainObject","transition","isFunction","28"],"mappings":"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","file":"dagre-d3.core.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @license\n * Copyright (c) 2012-2013 Chris Pettitt\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nmodule.exports =  {\n  graphlib: require(\"./lib/graphlib\"),\n  dagre: require(\"./lib/dagre\"),\n  intersect: require(\"./lib/intersect\"),\n  render: require(\"./lib/render\"),\n  util: require(\"./lib/util\"),\n  version: require(\"./lib/version\")\n};\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.dagreD3 = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @license\n * Copyright (c) 2012-2013 Chris Pettitt\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nmodule.exports =  {\n  graphlib: require(\"./lib/graphlib\"),\n  dagre: require(\"./lib/dagre\"),\n  intersect: require(\"./lib/intersect\"),\n  render: require(\"./lib/render\"),\n  util: require(\"./lib/util\"),\n  version: require(\"./lib/version\")\n};\n\n},{\"./lib/dagre\":8,\"./lib/graphlib\":9,\"./lib/intersect\":10,\"./lib/render\":25,\"./lib/util\":27,\"./lib/version\":28}],2:[function(require,module,exports){\nvar util = require(\"./util\");\n\nmodule.exports = {\n  \"default\": normal,\n  \"normal\": normal,\n  \"vee\": vee,\n  \"undirected\": undirected\n};\n\nfunction normal(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction vee(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 L 4 5 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction undirected(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 5 L 10 5\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\n},{\"./util\":27}],3:[function(require,module,exports){\nvar util = require(\"./util\"),\n    addLabel = require(\"./label/add-label\");\n\nmodule.exports = createClusters;\n\nfunction createClusters(selection, g) {\n  var clusters = g.nodes().filter(function(v) { return util.isSubgraph(g, v); }),\n      svgClustersUpdate = selection.selectAll(\"g.cluster\")\n        .data(clusters, function(v) { return v; });\n\n  /* -FIX- d3v4: during render updates, can we be smarter about this remove-and-recreate? */\n  svgClustersUpdate.selectAll(\"*\").remove();\n\n  var svgClustersEnter = svgClustersUpdate.enter()\n    .append(\"g\")\n      .attr(\"class\", \"cluster\")\n      .attr(\"id\",function(v){\n          var node = g.node(v);\n          return node.id;\n      })\n      .style(\"opacity\", 0);\n\n  var svgClustersMerge = svgClustersEnter.merge(svgClustersUpdate);\n\n  util.applyTransition(svgClustersMerge, g)\n    .style(\"opacity\", 1);\n\n  svgClustersMerge.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this);\n    d3.select(this).append(\"rect\");\n    var labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\");\n    addLabel(labelGroup, node, node.clusterLabelPos);\n  });\n\n  svgClustersMerge.selectAll(\"rect\").each(function(c) {\n    var node = g.node(c);\n    var domCluster = d3.select(this);\n    util.applyStyle(domCluster, node.style);\n  });\n\n  util.applyTransition(svgClustersUpdate.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgClustersMerge; /* -FIX d3v4: is this (the merge) what should be returned? */\n}\n\n},{\"./label/add-label\":18,\"./util\":27}],4:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createEdgeLabels;\n\nfunction createEdgeLabels(selection, g) {\n  var svgEdgeLabelsUpdate = selection.selectAll(\"g.edgeLabel\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  /* -FIX- d3v4: during render updates, can we be smarter about this remove-and-recreate? */\n  svgEdgeLabelsUpdate.selectAll(\"*\").remove();\n\n  var svgEdgeLabelsEnter = svgEdgeLabelsUpdate.enter()\n    .append(\"g\")\n      .classed(\"edgeLabel\", true)\n      .style(\"opacity\", 0);\n\n  var svgEdgeLabelsMerge = svgEdgeLabelsEnter.merge(svgEdgeLabelsUpdate);\n  svgEdgeLabelsMerge.each(function(e) {\n    var edge = g.edge(e),\n        label = addLabel(d3.select(this), g.edge(e), 0, 0).classed(\"label\", true),\n        bbox = label.node().getBBox();\n\n    if (edge.labelId) { label.attr(\"id\", edge.labelId); }\n    if (!_.has(edge, \"width\")) { edge.width = bbox.width; }\n    if (!_.has(edge, \"height\")) { edge.height = bbox.height; }\n  });\n\n  util.applyTransition(svgEdgeLabelsUpdate.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgEdgeLabelsMerge; /* -FIX d3v4: is this (the merge) what should be returned? */\n}\n\n},{\"./d3\":7,\"./label/add-label\":18,\"./lodash\":21,\"./util\":27}],5:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    intersectNode = require(\"./intersect/intersect-node\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\nmodule.exports = createEdgePaths;\n\nfunction createEdgePaths(selection, g, arrows) {\n  var svgPathsUpdate = selection.selectAll(\"g.edgePath\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n      .classed(\"update\", true);\n\n  var svgPathsEnter = enter(svgPathsUpdate, g);\n  exit(svgPathsUpdate, g);\n  var svgPathsMerge = svgPathsEnter.merge(svgPathsUpdate);\n\n  util.applyTransition(svgPathsMerge, g)\n    .style(\"opacity\", 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPathsMerge.each(function(e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr(\"id\", edge.id);\n    }\n\n    util.applyClass(domEdge, edge[\"class\"],\n      (domEdge.classed(\"update\") ? \"update \" : \"\") + \"edgePath\");\n  });\n\n  svgPathsMerge.selectAll(\"path.path\")\n    .each(function(e) {\n      var edge = g.edge(e);\n      edge.arrowheadId = _.uniqueId(\"arrowhead\");\n\n      var domEdge = d3.select(this)\n        .attr(\"marker-end\", function() {\n            return \"url(\" + makeFragmentRef(location.href, edge.arrowheadId) + \")\";\n        })\n        .style(\"fill\", \"none\");\n\n      util.applyTransition(domEdge, g)\n        .attr(\"d\", function(e) { return calcPoints(g, e); });\n\n      util.applyStyle(domEdge, edge.style);\n    });\n\n  /* -FIX- d3v4: during render updates, can we be smarter about this remove-and-recreate? */\n  svgPathsMerge.selectAll(\"defs *\").remove();\n  svgPathsMerge.selectAll(\"defs\")\n    .each(function(e) {\n      var edge = g.edge(e),\n          arrowhead = arrows[edge.arrowhead];\n      arrowhead(d3.select(this), edge.arrowheadId, edge, \"arrowhead\");\n    });\n\n  return svgPathsMerge;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split(\"#\")[0];\n  return baseUrl + \"#\" + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e),\n      tail = g.node(e.v),\n      head = g.node(e.w),\n      points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  var line = d3.line()\n    .x(function(d) { return d.x; })\n    .y(function(d) { return d.y; });\n\n  if (edge.hasOwnProperty(\"curve\")) {\n      line.curve(edge.curve);\n  }\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox(),\n      matrix = elem.ownerSVGElement.getScreenCTM()\n        .inverse()\n        .multiply(elem.getScreenCTM())\n        .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter()\n    .append(\"g\")\n      .attr(\"class\", \"edgePath\")\n      .style(\"opacity\", 0);\n  svgPathsEnter.append(\"path\")\n    .attr(\"class\", \"path\")\n    .attr(\"d\", function(e) {\n      var edge = g.edge(e),\n          sourceElem = g.node(e.v).elem,\n          points = _.range(edge.points.length).map(function() { return getCoords(sourceElem); });\n      return createLine(edge, points);\n    });\n  svgPathsEnter.append(\"defs\");\n  return svgPathsEnter;\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  util.applyTransition(svgPathExit.select(\"path.path\"), g)\n    .attr(\"d\", function(e) {\n      var source = g.node(e.v);\n\n      if (source) {\n        var points = _.range(this.getTotalLength()).map(function() { return source; });\n        return createLine({}, points);\n      } else {\n        return d3.select(this).attr(\"d\");\n      }\n    });\n}\n\n},{\"./d3\":7,\"./intersect/intersect-node\":14,\"./lodash\":21,\"./util\":27}],6:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createNodes;\n\nfunction createNodes(selection, g, shapes) {\n  var simpleNodes = g.nodes().filter(function(v) { return !util.isSubgraph(g, v); });\n  var svgNodesUpdate = selection.selectAll(\"g.node\")\n    .data(simpleNodes, function(v) { return v; })\n      .classed(\"update\", true);\n\n  /* -FIX- d3v4: during render updates, we can be smarter about this remove-and-recreate */\n  svgNodesUpdate.selectAll(\"*\").remove();\n  var svgNodesEnter = svgNodesUpdate.enter()\n    .append(\"g\")\n      .attr(\"class\", \"node\")\n      .style(\"opacity\", 0);\n\n  var svgNodesMerge = svgNodesEnter.merge(svgNodesUpdate);\n  svgNodesMerge.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this),\n        labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\"),\n        labelDom = addLabel(labelGroup, node),\n        shape = shapes[node.shape],\n        bbox = _.pick(labelDom.node().getBBox(), \"width\", \"height\");\n\n    node.elem = this;\n\n    if (node.id) { thisGroup.attr(\"id\", node.id); }\n    if (node.labelId) { labelGroup.attr(\"id\", node.labelId); }\n    util.applyClass(thisGroup, node[\"class\"],\n      (thisGroup.classed(\"update\") ? \"update \" : \"\") + \"node\");\n\n    if (_.has(node, \"width\")) { bbox.width = node.width; }\n    if (_.has(node, \"height\")) { bbox.height = node.height; }\n\n    bbox.width += node.paddingLeft + node.paddingRight;\n    bbox.height += node.paddingTop + node.paddingBottom;\n    labelGroup.attr(\"transform\", \"translate(\" +\n      ((node.paddingLeft - node.paddingRight) / 2) + \",\" +\n      ((node.paddingTop - node.paddingBottom) / 2) + \")\");\n\n    var shapeSvg = shape(d3.select(this), bbox, node);\n    util.applyStyle(shapeSvg, node.style);\n\n    var shapeBBox = shapeSvg.node().getBBox();\n    node.width = shapeBBox.width;\n    node.height = shapeBBox.height;\n  });\n\n  util.applyTransition(svgNodesUpdate.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgNodesMerge;\n}\n\n},{\"./d3\":7,\"./label/add-label\":18,\"./lodash\":21,\"./util\":27}],7:[function(require,module,exports){\n// Stub to get D3 either via NPM or from the global object\nmodule.exports = window.d3;\n\n},{}],8:[function(require,module,exports){\n/* global window */\n\nvar dagre;\n\nif (require) {\n  try {\n    dagre = require(\"dagre\");\n  } catch (e) {}\n}\n\nif (!dagre) {\n  dagre = window.dagre;\n}\n\nmodule.exports = dagre;\n\n},{\"dagre\":undefined}],9:[function(require,module,exports){\n/* global window */\n\nvar graphlib;\n\nif (require) {\n  try {\n    graphlib = require(\"graphlib\");\n  } catch (e) {}\n}\n\nif (!graphlib) {\n  graphlib = window.graphlib;\n}\n\nmodule.exports = graphlib;\n\n},{\"graphlib\":undefined}],10:[function(require,module,exports){\nmodule.exports = {\n  node: require(\"./intersect-node\"),\n  circle: require(\"./intersect-circle\"),\n  ellipse: require(\"./intersect-ellipse\"),\n  polygon: require(\"./intersect-polygon\"),\n  rect: require(\"./intersect-rect\")\n};\n\n},{\"./intersect-circle\":11,\"./intersect-ellipse\":12,\"./intersect-node\":14,\"./intersect-polygon\":15,\"./intersect-rect\":16}],11:[function(require,module,exports){\nvar intersectEllipse = require(\"./intersect-ellipse\");\n\nmodule.exports = intersectCircle;\n\nfunction intersectCircle(node, rx, point) {\n  return intersectEllipse(node, rx, rx, point);\n}\n\n},{\"./intersect-ellipse\":12}],12:[function(require,module,exports){\nmodule.exports = intersectEllipse;\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs(rx * ry * px / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs(rx * ry * py / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return {x: cx + dx, y: cy + dy};\n}\n\n\n},{}],13:[function(require,module,exports){\nmodule.exports = intersectLine;\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2 , r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = (p2.x * p1.y) - (p1.x * p2.y);\n\n  // Compute r3 and r4.\n  r3 = ((a1 * q1.x) + (b1 * q1.y) + c1);\n  r4 = ((a1 * q2.x) + (b1 * q2.y) + c1);\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if ((r3 !== 0) && (r4 !== 0) && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = (q2.x * q1.y) - (q1.x * q2.y);\n\n  // Compute r1 and r2\n  r1 = (a2 * p1.x) + (b2 * p1.y) + c2;\n  r2 = (a2 * p2.x) + (b2 * p2.y) + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if ((r1 !== 0) && (r2 !== 0) && (sameSign(r1, r2))) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = (a1 * b2) - (a2 * b1);\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = (b1 * c2) - (b2 * c1);\n  x = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  num = (a2 * c1) - (a1 * c2);\n  y = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n\n},{}],14:[function(require,module,exports){\nmodule.exports = intersectNode;\n\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n\n},{}],15:[function(require,module,exports){\nvar intersectLine = require(\"./intersect-line\");\n\nmodule.exports = intersectPolygon;\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY,\n      minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function(entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top =  y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(node, point,\n      {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log(\"NO INTERSECTION FOUND, RETURN NODE CENTER\", node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function(p, q) {\n      var pdx = p.x - point.x,\n          pdy = p.y - point.y,\n          distp = Math.sqrt(pdx * pdx + pdy * pdy),\n\n          qdx = q.x - point.x,\n          qdy = q.y - point.y,\n          distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return (distp < distq) ? -1 : (distp === distq ? 0 : 1);\n    });\n  }\n  return intersections[0];\n}\n\n},{\"./intersect-line\":13}],16:[function(require,module,exports){\nmodule.exports = intersectRect;\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : w * dy / dx;\n  }\n\n  return {x: x + sx, y: y + sy};\n}\n\n},{}],17:[function(require,module,exports){\nvar util = require(\"../util\");\n\nmodule.exports = addHtmlLabel;\n\nfunction addHtmlLabel(root, node) {\n  var fo = root\n    .append(\"foreignObject\")\n      .attr(\"width\", \"100000\");\n\n  var div = fo\n    .append(\"xhtml:div\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n\n  var label = node.label;\n  switch(typeof label) {\n    case \"function\":\n      div.insert(label);\n      break;\n    case \"object\":\n      // Currently we assume this is a DOM object.\n      div.insert(function() { return label; });\n      break;\n    default: div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"inline-block\");\n  // Fix for firefox\n  div.style(\"white-space\", \"nowrap\");\n\n  var client = div.node().getBoundingClientRect();\n  fo\n    .attr(\"width\", client.width)\n    .attr(\"height\", client.height); \n\n  return fo;\n}\n\n},{\"../util\":27}],18:[function(require,module,exports){\nvar addTextLabel = require(\"./add-text-label\"),\n    addHtmlLabel = require(\"./add-html-label\"),\n    addSVGLabel  = require(\"./add-svg-label\");\n\nmodule.exports = addLabel;\n\nfunction addLabel(root, node, location) {\n  var label = node.label;\n  var labelSvg = root.append(\"g\");\n\n  // Allow the label to be a string, a function that returns a DOM element, or\n  // a DOM element itself.\n  if (node.labelType === \"svg\") {\n    addSVGLabel(labelSvg, node);\n  } else if (typeof label !== \"string\" || node.labelType === \"html\") {\n    addHtmlLabel(labelSvg, node);\n  } else {\n    addTextLabel(labelSvg, node);\n  }\n\n  var labelBBox = labelSvg.node().getBBox();\n  var y;\n  switch(location) {\n    case \"top\":\n      y = (-node.height / 2);\n      break;\n    case \"bottom\":\n      y = (node.height / 2) - labelBBox.height;\n      break;\n    default:\n      y = (-labelBBox.height / 2);\n  }\n  labelSvg.attr(\"transform\",\n                \"translate(\" + (-labelBBox.x - labelBBox.width / 2) + \",\" + y + \")\");\n\n  return labelSvg;\n}\n\n},{\"./add-html-label\":17,\"./add-svg-label\":19,\"./add-text-label\":20}],19:[function(require,module,exports){\nvar util = require(\"../util\");\n\nmodule.exports = addSVGLabel;\n\nfunction addSVGLabel(root, node) {\n  var domNode = root;\n\n  domNode.node().appendChild(node.label);\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\n},{\"../util\":27}],20:[function(require,module,exports){\nvar util = require(\"../util\");\n\nmodule.exports = addTextLabel;\n\n/*\n * Attaches a text label to the specified root. Handles escape sequences.\n */\nfunction addTextLabel(root, node) {\n  var domNode = root.append(\"text\");\n\n  var lines = processEscapeSequences(node.label).split(\"\\n\");\n  for (var i = 0; i < lines.length; i++) {\n    domNode\n      .append(\"tspan\")\n        .attr(\"xml:space\", \"preserve\")\n        .attr(\"dy\", \"1em\")\n        .attr(\"x\", \"1\")\n        .text(lines[i]);\n  }\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\nfunction processEscapeSequences(text) {\n  var newText = \"\",\n      escaped = false,\n      ch;\n  for (var i = 0; i < text.length; ++i) {\n    ch = text[i];\n    if (escaped) {\n      switch(ch) {\n        case \"n\": newText += \"\\n\"; break;\n        default: newText += ch;\n      }\n      escaped = false;\n    } else if (ch === \"\\\\\") {\n      escaped = true;\n    } else {\n      newText += ch;\n    }\n  }\n  return newText;\n}\n\n},{\"../util\":27}],21:[function(require,module,exports){\n/* global window */\n\nvar lodash;\n\nif (require) {\n  try {\n    lodash = require(\"lodash\");\n  } catch (e) {}\n}\n\nif (!lodash) {\n  lodash = window._;\n}\n\nmodule.exports = lodash;\n\n},{\"lodash\":undefined}],22:[function(require,module,exports){\n\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionClusters;\n\nfunction positionClusters(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n      .style(\"opacity\", 1)\n      .attr(\"transform\", translate);\n\n  util.applyTransition(created.selectAll(\"rect\"), g)\n      .attr(\"width\", function(v) { return g.node(v).width; })\n      .attr(\"height\", function(v) { return g.node(v).height; })\n      .attr(\"x\", function(v) {\n        var node = g.node(v);\n        return -node.width / 2;\n      })\n      .attr(\"y\", function(v) {\n        var node = g.node(v);\n        return -node.height / 2;\n      });\n\n}\n\n},{\"./d3\":7,\"./util\":27}],23:[function(require,module,exports){\n\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\"),\n    _ = require(\"./lodash\");\n\nmodule.exports = positionEdgeLabels;\n\nfunction positionEdgeLabels(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(e) {\n    var edge = g.edge(e);\n    return _.has(edge, \"x\") ? \"translate(\" + edge.x + \",\" + edge.y + \")\" : \"\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n\n},{\"./d3\":7,\"./lodash\":21,\"./util\":27}],24:[function(require,module,exports){\n\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionNodes;\n\nfunction positionNodes(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n\n},{\"./d3\":7,\"./util\":27}],25:[function(require,module,exports){\nvar _ = require(\"./lodash\"),\n    layout = require(\"./dagre\").layout;\n\nmodule.exports = render;\n\n// This design is based on http://bost.ocks.org/mike/chart/.\nfunction render() {\n  var createNodes = require(\"./create-nodes\"),\n      createClusters = require(\"./create-clusters\"),\n      createEdgeLabels = require(\"./create-edge-labels\"),\n      createEdgePaths = require(\"./create-edge-paths\"),\n      positionNodes = require(\"./position-nodes\"),\n      positionEdgeLabels = require(\"./position-edge-labels\"),\n      positionClusters = require(\"./position-clusters\"),\n      shapes = require(\"./shapes\"),\n      arrows = require(\"./arrows\");\n\n  var fn = function(svg, g) {\n    preProcessGraph(g);\n\n    var outputGroup = createOrSelectGroup(svg, \"output\"),\n        clustersGroup = createOrSelectGroup(outputGroup, \"clusters\"),\n        edgePathsGroup = createOrSelectGroup(outputGroup, \"edgePaths\"),\n        edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, \"edgeLabels\"), g),\n        nodes = createNodes(createOrSelectGroup(outputGroup, \"nodes\"), g, shapes);\n\n    layout(g);\n\n    positionNodes(nodes, g);\n    positionEdgeLabels(edgeLabels, g);\n    createEdgePaths(edgePathsGroup, g, arrows);\n\n    var clusters = createClusters(clustersGroup, g);\n    positionClusters(clusters, g);\n\n    postProcessGraph(g);\n  };\n\n  fn.createNodes = function(value) {\n    if (!arguments.length) return createNodes;\n    createNodes = value;\n    return fn;\n  };\n\n  fn.createClusters = function(value) {\n    if (!arguments.length) return createClusters;\n    createClusters = value;\n    return fn;\n  };\n\n  fn.createEdgeLabels = function(value) {\n    if (!arguments.length) return createEdgeLabels;\n    createEdgeLabels = value;\n    return fn;\n  };\n\n  fn.createEdgePaths = function(value) {\n    if (!arguments.length) return createEdgePaths;\n    createEdgePaths = value;\n    return fn;\n  };\n\n  fn.shapes = function(value) {\n    if (!arguments.length) return shapes;\n    shapes = value;\n    return fn;\n  };\n\n  fn.arrows = function(value) {\n    if (!arguments.length) return arrows;\n    arrows = value;\n    return fn;\n  };\n\n  return fn;\n}\n\nvar NODE_DEFAULT_ATTRS = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: \"rect\"\n};\n\nvar EDGE_DEFAULT_ATTRS = {\n  arrowhead: \"normal\"\n};\n\nfunction preProcessGraph(g) {\n  g.nodes().forEach(function(v) {\n    var node = g.node(v);\n    if (!_.has(node, \"label\") && !g.children(v).length) { node.label = v; }\n\n    if (_.has(node, \"paddingX\")) {\n      _.defaults(node, {\n        paddingLeft: node.paddingX,\n        paddingRight: node.paddingX\n      });\n    }\n\n    if (_.has(node, \"paddingY\")) {\n      _.defaults(node, {\n        paddingTop: node.paddingY,\n        paddingBottom: node.paddingY\n      });\n    }\n\n    if (_.has(node, \"padding\")) {\n      _.defaults(node, {\n        paddingLeft: node.padding,\n        paddingRight: node.padding,\n        paddingTop: node.padding,\n        paddingBottom: node.padding\n      });\n    }\n\n    _.defaults(node, NODE_DEFAULT_ATTRS);\n\n    _.each([\"paddingLeft\", \"paddingRight\", \"paddingTop\", \"paddingBottom\"], function(k) {\n      node[k] = Number(node[k]);\n    });\n\n    // Save dimensions for restore during post-processing\n    if (_.has(node, \"width\")) { node._prevWidth = node.width; }\n    if (_.has(node, \"height\")) { node._prevHeight = node.height; }\n  });\n\n  g.edges().forEach(function(e) {\n    var edge = g.edge(e);\n    if (!_.has(edge, \"label\")) { edge.label = \"\"; }\n    _.defaults(edge, EDGE_DEFAULT_ATTRS);\n  });\n}\n\nfunction postProcessGraph(g) {\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n\n    // Restore original dimensions\n    if (_.has(node, \"_prevWidth\")) {\n      node.width = node._prevWidth;\n    } else {\n      delete node.width;\n    }\n\n    if (_.has(node, \"_prevHeight\")) {\n      node.height = node._prevHeight;\n    } else {\n      delete node.height;\n    }\n\n    delete node._prevWidth;\n    delete node._prevHeight;\n  });\n}\n\nfunction createOrSelectGroup(root, name) {\n  var selection = root.select(\"g.\" + name);\n  if (selection.empty()) {\n    selection = root.append(\"g\").attr(\"class\", name);\n  }\n  return selection;\n}\n\n},{\"./arrows\":2,\"./create-clusters\":3,\"./create-edge-labels\":4,\"./create-edge-paths\":5,\"./create-nodes\":6,\"./dagre\":8,\"./lodash\":21,\"./position-clusters\":22,\"./position-edge-labels\":23,\"./position-nodes\":24,\"./shapes\":26}],26:[function(require,module,exports){\n\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\"),\n    intersectEllipse = require(\"./intersect/intersect-ellipse\"),\n    intersectCircle = require(\"./intersect/intersect-circle\"),\n    intersectPolygon = require(\"./intersect/intersect-polygon\");\n\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\")\n        .attr(\"rx\", node.rx)\n        .attr(\"ry\", node.ry)\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"width\", bbox.width)\n        .attr(\"height\", bbox.height);\n\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2,\n      ry = bbox.height / 2,\n      shapeSvg = parent.insert(\"ellipse\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"rx\", rx)\n        .attr(\"ry\", ry);\n\n  node.intersect = function(point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2,\n      shapeSvg = parent.insert(\"circle\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"r\", r);\n\n  node.intersect = function(point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2,\n      h = (bbox.height * Math.SQRT2) / 2,\n      points = [\n        { x:  0, y: -h },\n        { x: -w, y:  0 },\n        { x:  0, y:  h },\n        { x:  w, y:  0 }\n      ],\n      shapeSvg = parent.insert(\"polygon\", \":first-child\")\n        .attr(\"points\", points.map(function(p) { return p.x + \",\" + p.y; }).join(\" \"));\n\n  node.intersect = function(p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n\n},{\"./intersect/intersect-circle\":11,\"./intersect/intersect-ellipse\":12,\"./intersect/intersect-polygon\":15,\"./intersect/intersect-rect\":16}],27:[function(require,module,exports){\nvar _ = require(\"./lodash\");\n\n// Public utility functions\nmodule.exports = {\n  isSubgraph: isSubgraph,\n  edgeToId: edgeToId,\n  applyStyle: applyStyle,\n  applyClass: applyClass,\n  applyTransition: applyTransition\n};\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + \":\" + escapeId(e.w) + \":\" + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, \"\\\\:\") : \"\";\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom\n      .attr(\"class\", classFn)\n      .attr(\"class\", otherClasses + \" \" + dom.attr(\"class\"));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n\n},{\"./lodash\":21}],28:[function(require,module,exports){\nmodule.exports = \"0.5.0-pre\";\n\n},{}]},{},[1])(1)\n});\n\n","var util = require(\"./util\");\n\nmodule.exports = {\n  \"default\": normal,\n  \"normal\": normal,\n  \"vee\": vee,\n  \"undirected\": undirected\n};\n\nfunction normal(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction vee(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 L 4 5 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction undirected(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 5 L 10 5\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n","var util = require(\"./util\"),\n    addLabel = require(\"./label/add-label\");\n\nmodule.exports = createClusters;\n\nfunction createClusters(selection, g) {\n  var clusters = g.nodes().filter(function(v) { return util.isSubgraph(g, v); }),\n      svgClustersUpdate = selection.selectAll(\"g.cluster\")\n        .data(clusters, function(v) { return v; });\n\n  /* -FIX- d3v4: during render updates, can we be smarter about this remove-and-recreate? */\n  svgClustersUpdate.selectAll(\"*\").remove();\n\n  var svgClustersEnter = svgClustersUpdate.enter()\n    .append(\"g\")\n      .attr(\"class\", \"cluster\")\n      .attr(\"id\",function(v){\n          var node = g.node(v);\n          return node.id;\n      })\n      .style(\"opacity\", 0);\n\n  var svgClustersMerge = svgClustersEnter.merge(svgClustersUpdate);\n\n  util.applyTransition(svgClustersMerge, g)\n    .style(\"opacity\", 1);\n\n  svgClustersMerge.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this);\n    d3.select(this).append(\"rect\");\n    var labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\");\n    addLabel(labelGroup, node, node.clusterLabelPos);\n  });\n\n  svgClustersMerge.selectAll(\"rect\").each(function(c) {\n    var node = g.node(c);\n    var domCluster = d3.select(this);\n    util.applyStyle(domCluster, node.style);\n  });\n\n  util.applyTransition(svgClustersUpdate.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgClustersMerge; /* -FIX d3v4: is this (the merge) what should be returned? */\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createEdgeLabels;\n\nfunction createEdgeLabels(selection, g) {\n  var svgEdgeLabelsUpdate = selection.selectAll(\"g.edgeLabel\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  /* -FIX- d3v4: during render updates, can we be smarter about this remove-and-recreate? */\n  svgEdgeLabelsUpdate.selectAll(\"*\").remove();\n\n  var svgEdgeLabelsEnter = svgEdgeLabelsUpdate.enter()\n    .append(\"g\")\n      .classed(\"edgeLabel\", true)\n      .style(\"opacity\", 0);\n\n  var svgEdgeLabelsMerge = svgEdgeLabelsEnter.merge(svgEdgeLabelsUpdate);\n  svgEdgeLabelsMerge.each(function(e) {\n    var edge = g.edge(e),\n        label = addLabel(d3.select(this), g.edge(e), 0, 0).classed(\"label\", true),\n        bbox = label.node().getBBox();\n\n    if (edge.labelId) { label.attr(\"id\", edge.labelId); }\n    if (!_.has(edge, \"width\")) { edge.width = bbox.width; }\n    if (!_.has(edge, \"height\")) { edge.height = bbox.height; }\n  });\n\n  util.applyTransition(svgEdgeLabelsUpdate.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgEdgeLabelsMerge; /* -FIX d3v4: is this (the merge) what should be returned? */\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    intersectNode = require(\"./intersect/intersect-node\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\nmodule.exports = createEdgePaths;\n\nfunction createEdgePaths(selection, g, arrows) {\n  var svgPathsUpdate = selection.selectAll(\"g.edgePath\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n      .classed(\"update\", true);\n\n  var svgPathsEnter = enter(svgPathsUpdate, g);\n  exit(svgPathsUpdate, g);\n  var svgPathsMerge = svgPathsEnter.merge(svgPathsUpdate);\n\n  util.applyTransition(svgPathsMerge, g)\n    .style(\"opacity\", 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPathsMerge.each(function(e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr(\"id\", edge.id);\n    }\n\n    util.applyClass(domEdge, edge[\"class\"],\n      (domEdge.classed(\"update\") ? \"update \" : \"\") + \"edgePath\");\n  });\n\n  svgPathsMerge.selectAll(\"path.path\")\n    .each(function(e) {\n      var edge = g.edge(e);\n      edge.arrowheadId = _.uniqueId(\"arrowhead\");\n\n      var domEdge = d3.select(this)\n        .attr(\"marker-end\", function() {\n            return \"url(\" + makeFragmentRef(location.href, edge.arrowheadId) + \")\";\n        })\n        .style(\"fill\", \"none\");\n\n      util.applyTransition(domEdge, g)\n        .attr(\"d\", function(e) { return calcPoints(g, e); });\n\n      util.applyStyle(domEdge, edge.style);\n    });\n\n  /* -FIX- d3v4: during render updates, can we be smarter about this remove-and-recreate? */\n  svgPathsMerge.selectAll(\"defs *\").remove();\n  svgPathsMerge.selectAll(\"defs\")\n    .each(function(e) {\n      var edge = g.edge(e),\n          arrowhead = arrows[edge.arrowhead];\n      arrowhead(d3.select(this), edge.arrowheadId, edge, \"arrowhead\");\n    });\n\n  return svgPathsMerge;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split(\"#\")[0];\n  return baseUrl + \"#\" + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e),\n      tail = g.node(e.v),\n      head = g.node(e.w),\n      points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  var line = d3.line()\n    .x(function(d) { return d.x; })\n    .y(function(d) { return d.y; });\n\n  if (edge.hasOwnProperty(\"curve\")) {\n      line.curve(edge.curve);\n  }\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox(),\n      matrix = elem.ownerSVGElement.getScreenCTM()\n        .inverse()\n        .multiply(elem.getScreenCTM())\n        .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter()\n    .append(\"g\")\n      .attr(\"class\", \"edgePath\")\n      .style(\"opacity\", 0);\n  svgPathsEnter.append(\"path\")\n    .attr(\"class\", \"path\")\n    .attr(\"d\", function(e) {\n      var edge = g.edge(e),\n          sourceElem = g.node(e.v).elem,\n          points = _.range(edge.points.length).map(function() { return getCoords(sourceElem); });\n      return createLine(edge, points);\n    });\n  svgPathsEnter.append(\"defs\");\n  return svgPathsEnter;\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  util.applyTransition(svgPathExit.select(\"path.path\"), g)\n    .attr(\"d\", function(e) {\n      var source = g.node(e.v);\n\n      if (source) {\n        var points = _.range(this.getTotalLength()).map(function() { return source; });\n        return createLine({}, points);\n      } else {\n        return d3.select(this).attr(\"d\");\n      }\n    });\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createNodes;\n\nfunction createNodes(selection, g, shapes) {\n  var simpleNodes = g.nodes().filter(function(v) { return !util.isSubgraph(g, v); });\n  var svgNodesUpdate = selection.selectAll(\"g.node\")\n    .data(simpleNodes, function(v) { return v; })\n      .classed(\"update\", true);\n\n  /* -FIX- d3v4: during render updates, we can be smarter about this remove-and-recreate */\n  svgNodesUpdate.selectAll(\"*\").remove();\n  var svgNodesEnter = svgNodesUpdate.enter()\n    .append(\"g\")\n      .attr(\"class\", \"node\")\n      .style(\"opacity\", 0);\n\n  var svgNodesMerge = svgNodesEnter.merge(svgNodesUpdate);\n  svgNodesMerge.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this),\n        labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\"),\n        labelDom = addLabel(labelGroup, node),\n        shape = shapes[node.shape],\n        bbox = _.pick(labelDom.node().getBBox(), \"width\", \"height\");\n\n    node.elem = this;\n\n    if (node.id) { thisGroup.attr(\"id\", node.id); }\n    if (node.labelId) { labelGroup.attr(\"id\", node.labelId); }\n    util.applyClass(thisGroup, node[\"class\"],\n      (thisGroup.classed(\"update\") ? \"update \" : \"\") + \"node\");\n\n    if (_.has(node, \"width\")) { bbox.width = node.width; }\n    if (_.has(node, \"height\")) { bbox.height = node.height; }\n\n    bbox.width += node.paddingLeft + node.paddingRight;\n    bbox.height += node.paddingTop + node.paddingBottom;\n    labelGroup.attr(\"transform\", \"translate(\" +\n      ((node.paddingLeft - node.paddingRight) / 2) + \",\" +\n      ((node.paddingTop - node.paddingBottom) / 2) + \")\");\n\n    var shapeSvg = shape(d3.select(this), bbox, node);\n    util.applyStyle(shapeSvg, node.style);\n\n    var shapeBBox = shapeSvg.node().getBBox();\n    node.width = shapeBBox.width;\n    node.height = shapeBBox.height;\n  });\n\n  util.applyTransition(svgNodesUpdate.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgNodesMerge;\n}\n","// Stub to get D3 either via NPM or from the global object\nmodule.exports = window.d3;\n","/* global window */\n\nvar dagre;\n\nif (require) {\n  try {\n    dagre = require(\"dagre\");\n  } catch (e) {}\n}\n\nif (!dagre) {\n  dagre = window.dagre;\n}\n\nmodule.exports = dagre;\n","/* global window */\n\nvar graphlib;\n\nif (require) {\n  try {\n    graphlib = require(\"graphlib\");\n  } catch (e) {}\n}\n\nif (!graphlib) {\n  graphlib = window.graphlib;\n}\n\nmodule.exports = graphlib;\n","module.exports = {\n  node: require(\"./intersect-node\"),\n  circle: require(\"./intersect-circle\"),\n  ellipse: require(\"./intersect-ellipse\"),\n  polygon: require(\"./intersect-polygon\"),\n  rect: require(\"./intersect-rect\")\n};\n","var intersectEllipse = require(\"./intersect-ellipse\");\n\nmodule.exports = intersectCircle;\n\nfunction intersectCircle(node, rx, point) {\n  return intersectEllipse(node, rx, rx, point);\n}\n","module.exports = intersectEllipse;\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs(rx * ry * px / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs(rx * ry * py / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return {x: cx + dx, y: cy + dy};\n}\n\n","module.exports = intersectLine;\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2 , r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = (p2.x * p1.y) - (p1.x * p2.y);\n\n  // Compute r3 and r4.\n  r3 = ((a1 * q1.x) + (b1 * q1.y) + c1);\n  r4 = ((a1 * q2.x) + (b1 * q2.y) + c1);\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if ((r3 !== 0) && (r4 !== 0) && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = (q2.x * q1.y) - (q1.x * q2.y);\n\n  // Compute r1 and r2\n  r1 = (a2 * p1.x) + (b2 * p1.y) + c2;\n  r2 = (a2 * p2.x) + (b2 * p2.y) + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if ((r1 !== 0) && (r2 !== 0) && (sameSign(r1, r2))) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = (a1 * b2) - (a2 * b1);\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = (b1 * c2) - (b2 * c1);\n  x = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  num = (a2 * c1) - (a1 * c2);\n  y = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n","module.exports = intersectNode;\n\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n","var intersectLine = require(\"./intersect-line\");\n\nmodule.exports = intersectPolygon;\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY,\n      minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function(entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top =  y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(node, point,\n      {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log(\"NO INTERSECTION FOUND, RETURN NODE CENTER\", node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function(p, q) {\n      var pdx = p.x - point.x,\n          pdy = p.y - point.y,\n          distp = Math.sqrt(pdx * pdx + pdy * pdy),\n\n          qdx = q.x - point.x,\n          qdy = q.y - point.y,\n          distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return (distp < distq) ? -1 : (distp === distq ? 0 : 1);\n    });\n  }\n  return intersections[0];\n}\n","module.exports = intersectRect;\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : w * dy / dx;\n  }\n\n  return {x: x + sx, y: y + sy};\n}\n","var util = require(\"../util\");\n\nmodule.exports = addHtmlLabel;\n\nfunction addHtmlLabel(root, node) {\n  var fo = root\n    .append(\"foreignObject\")\n      .attr(\"width\", \"100000\");\n\n  var div = fo\n    .append(\"xhtml:div\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n\n  var label = node.label;\n  switch(typeof label) {\n    case \"function\":\n      div.insert(label);\n      break;\n    case \"object\":\n      // Currently we assume this is a DOM object.\n      div.insert(function() { return label; });\n      break;\n    default: div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"inline-block\");\n  // Fix for firefox\n  div.style(\"white-space\", \"nowrap\");\n\n  var client = div.node().getBoundingClientRect();\n  fo\n    .attr(\"width\", client.width)\n    .attr(\"height\", client.height); \n\n  return fo;\n}\n","var addTextLabel = require(\"./add-text-label\"),\n    addHtmlLabel = require(\"./add-html-label\"),\n    addSVGLabel  = require(\"./add-svg-label\");\n\nmodule.exports = addLabel;\n\nfunction addLabel(root, node, location) {\n  var label = node.label;\n  var labelSvg = root.append(\"g\");\n\n  // Allow the label to be a string, a function that returns a DOM element, or\n  // a DOM element itself.\n  if (node.labelType === \"svg\") {\n    addSVGLabel(labelSvg, node);\n  } else if (typeof label !== \"string\" || node.labelType === \"html\") {\n    addHtmlLabel(labelSvg, node);\n  } else {\n    addTextLabel(labelSvg, node);\n  }\n\n  var labelBBox = labelSvg.node().getBBox();\n  var y;\n  switch(location) {\n    case \"top\":\n      y = (-node.height / 2);\n      break;\n    case \"bottom\":\n      y = (node.height / 2) - labelBBox.height;\n      break;\n    default:\n      y = (-labelBBox.height / 2);\n  }\n  labelSvg.attr(\"transform\",\n                \"translate(\" + (-labelBBox.x - labelBBox.width / 2) + \",\" + y + \")\");\n\n  return labelSvg;\n}\n","var util = require(\"../util\");\n\nmodule.exports = addSVGLabel;\n\nfunction addSVGLabel(root, node) {\n  var domNode = root;\n\n  domNode.node().appendChild(node.label);\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n","var util = require(\"../util\");\n\nmodule.exports = addTextLabel;\n\n/*\n * Attaches a text label to the specified root. Handles escape sequences.\n */\nfunction addTextLabel(root, node) {\n  var domNode = root.append(\"text\");\n\n  var lines = processEscapeSequences(node.label).split(\"\\n\");\n  for (var i = 0; i < lines.length; i++) {\n    domNode\n      .append(\"tspan\")\n        .attr(\"xml:space\", \"preserve\")\n        .attr(\"dy\", \"1em\")\n        .attr(\"x\", \"1\")\n        .text(lines[i]);\n  }\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\nfunction processEscapeSequences(text) {\n  var newText = \"\",\n      escaped = false,\n      ch;\n  for (var i = 0; i < text.length; ++i) {\n    ch = text[i];\n    if (escaped) {\n      switch(ch) {\n        case \"n\": newText += \"\\n\"; break;\n        default: newText += ch;\n      }\n      escaped = false;\n    } else if (ch === \"\\\\\") {\n      escaped = true;\n    } else {\n      newText += ch;\n    }\n  }\n  return newText;\n}\n","/* global window */\n\nvar lodash;\n\nif (require) {\n  try {\n    lodash = require(\"lodash\");\n  } catch (e) {}\n}\n\nif (!lodash) {\n  lodash = window._;\n}\n\nmodule.exports = lodash;\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionClusters;\n\nfunction positionClusters(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n      .style(\"opacity\", 1)\n      .attr(\"transform\", translate);\n\n  util.applyTransition(created.selectAll(\"rect\"), g)\n      .attr(\"width\", function(v) { return g.node(v).width; })\n      .attr(\"height\", function(v) { return g.node(v).height; })\n      .attr(\"x\", function(v) {\n        var node = g.node(v);\n        return -node.width / 2;\n      })\n      .attr(\"y\", function(v) {\n        var node = g.node(v);\n        return -node.height / 2;\n      });\n\n}\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\"),\n    _ = require(\"./lodash\");\n\nmodule.exports = positionEdgeLabels;\n\nfunction positionEdgeLabels(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(e) {\n    var edge = g.edge(e);\n    return _.has(edge, \"x\") ? \"translate(\" + edge.x + \",\" + edge.y + \")\" : \"\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionNodes;\n\nfunction positionNodes(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n","var _ = require(\"./lodash\"),\n    layout = require(\"./dagre\").layout;\n\nmodule.exports = render;\n\n// This design is based on http://bost.ocks.org/mike/chart/.\nfunction render() {\n  var createNodes = require(\"./create-nodes\"),\n      createClusters = require(\"./create-clusters\"),\n      createEdgeLabels = require(\"./create-edge-labels\"),\n      createEdgePaths = require(\"./create-edge-paths\"),\n      positionNodes = require(\"./position-nodes\"),\n      positionEdgeLabels = require(\"./position-edge-labels\"),\n      positionClusters = require(\"./position-clusters\"),\n      shapes = require(\"./shapes\"),\n      arrows = require(\"./arrows\");\n\n  var fn = function(svg, g) {\n    preProcessGraph(g);\n\n    var outputGroup = createOrSelectGroup(svg, \"output\"),\n        clustersGroup = createOrSelectGroup(outputGroup, \"clusters\"),\n        edgePathsGroup = createOrSelectGroup(outputGroup, \"edgePaths\"),\n        edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, \"edgeLabels\"), g),\n        nodes = createNodes(createOrSelectGroup(outputGroup, \"nodes\"), g, shapes);\n\n    layout(g);\n\n    positionNodes(nodes, g);\n    positionEdgeLabels(edgeLabels, g);\n    createEdgePaths(edgePathsGroup, g, arrows);\n\n    var clusters = createClusters(clustersGroup, g);\n    positionClusters(clusters, g);\n\n    postProcessGraph(g);\n  };\n\n  fn.createNodes = function(value) {\n    if (!arguments.length) return createNodes;\n    createNodes = value;\n    return fn;\n  };\n\n  fn.createClusters = function(value) {\n    if (!arguments.length) return createClusters;\n    createClusters = value;\n    return fn;\n  };\n\n  fn.createEdgeLabels = function(value) {\n    if (!arguments.length) return createEdgeLabels;\n    createEdgeLabels = value;\n    return fn;\n  };\n\n  fn.createEdgePaths = function(value) {\n    if (!arguments.length) return createEdgePaths;\n    createEdgePaths = value;\n    return fn;\n  };\n\n  fn.shapes = function(value) {\n    if (!arguments.length) return shapes;\n    shapes = value;\n    return fn;\n  };\n\n  fn.arrows = function(value) {\n    if (!arguments.length) return arrows;\n    arrows = value;\n    return fn;\n  };\n\n  return fn;\n}\n\nvar NODE_DEFAULT_ATTRS = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: \"rect\"\n};\n\nvar EDGE_DEFAULT_ATTRS = {\n  arrowhead: \"normal\"\n};\n\nfunction preProcessGraph(g) {\n  g.nodes().forEach(function(v) {\n    var node = g.node(v);\n    if (!_.has(node, \"label\") && !g.children(v).length) { node.label = v; }\n\n    if (_.has(node, \"paddingX\")) {\n      _.defaults(node, {\n        paddingLeft: node.paddingX,\n        paddingRight: node.paddingX\n      });\n    }\n\n    if (_.has(node, \"paddingY\")) {\n      _.defaults(node, {\n        paddingTop: node.paddingY,\n        paddingBottom: node.paddingY\n      });\n    }\n\n    if (_.has(node, \"padding\")) {\n      _.defaults(node, {\n        paddingLeft: node.padding,\n        paddingRight: node.padding,\n        paddingTop: node.padding,\n        paddingBottom: node.padding\n      });\n    }\n\n    _.defaults(node, NODE_DEFAULT_ATTRS);\n\n    _.each([\"paddingLeft\", \"paddingRight\", \"paddingTop\", \"paddingBottom\"], function(k) {\n      node[k] = Number(node[k]);\n    });\n\n    // Save dimensions for restore during post-processing\n    if (_.has(node, \"width\")) { node._prevWidth = node.width; }\n    if (_.has(node, \"height\")) { node._prevHeight = node.height; }\n  });\n\n  g.edges().forEach(function(e) {\n    var edge = g.edge(e);\n    if (!_.has(edge, \"label\")) { edge.label = \"\"; }\n    _.defaults(edge, EDGE_DEFAULT_ATTRS);\n  });\n}\n\nfunction postProcessGraph(g) {\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n\n    // Restore original dimensions\n    if (_.has(node, \"_prevWidth\")) {\n      node.width = node._prevWidth;\n    } else {\n      delete node.width;\n    }\n\n    if (_.has(node, \"_prevHeight\")) {\n      node.height = node._prevHeight;\n    } else {\n      delete node.height;\n    }\n\n    delete node._prevWidth;\n    delete node._prevHeight;\n  });\n}\n\nfunction createOrSelectGroup(root, name) {\n  var selection = root.select(\"g.\" + name);\n  if (selection.empty()) {\n    selection = root.append(\"g\").attr(\"class\", name);\n  }\n  return selection;\n}\n","\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\"),\n    intersectEllipse = require(\"./intersect/intersect-ellipse\"),\n    intersectCircle = require(\"./intersect/intersect-circle\"),\n    intersectPolygon = require(\"./intersect/intersect-polygon\");\n\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\")\n        .attr(\"rx\", node.rx)\n        .attr(\"ry\", node.ry)\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"width\", bbox.width)\n        .attr(\"height\", bbox.height);\n\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2,\n      ry = bbox.height / 2,\n      shapeSvg = parent.insert(\"ellipse\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"rx\", rx)\n        .attr(\"ry\", ry);\n\n  node.intersect = function(point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2,\n      shapeSvg = parent.insert(\"circle\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"r\", r);\n\n  node.intersect = function(point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2,\n      h = (bbox.height * Math.SQRT2) / 2,\n      points = [\n        { x:  0, y: -h },\n        { x: -w, y:  0 },\n        { x:  0, y:  h },\n        { x:  w, y:  0 }\n      ],\n      shapeSvg = parent.insert(\"polygon\", \":first-child\")\n        .attr(\"points\", points.map(function(p) { return p.x + \",\" + p.y; }).join(\" \"));\n\n  node.intersect = function(p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n","var _ = require(\"./lodash\");\n\n// Public utility functions\nmodule.exports = {\n  isSubgraph: isSubgraph,\n  edgeToId: edgeToId,\n  applyStyle: applyStyle,\n  applyClass: applyClass,\n  applyTransition: applyTransition\n};\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + \":\" + escapeId(e.w) + \":\" + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, \"\\\\:\") : \"\";\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom\n      .attr(\"class\", classFn)\n      .attr(\"class\", otherClasses + \" \" + dom.attr(\"class\"));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","module.exports = \"0.5.0-pre\";\n"]}